/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import Config.ConnectionManager;
import com.JDBC.JDBCManager;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Alert;

/**
 *
 * @author Mainul35
 */
public class CreatePhaseSwing extends javax.swing.JPanel {

    private static String selectedSkill;
    private static long projectId;
    static String sql;
    private static long phaseId;
    static int i;
    private Connection con;

    /**
     * Creates new form CreatePhaseSwing
     */
    public CreatePhaseSwing(long projectId) throws SQLException, ClassNotFoundException {
        CreatePhaseSwing.projectId = projectId;
        initComponents();
        ArrayList<HashMap<String, String>> al;
        String sql = "select skillName from skill";
        Class.forName("org.sqlite.JDBC");
        con = DriverManager.getConnection("jdbc:sqlite:wetrack.db");
        try (PreparedStatement pstmt = con.prepareStatement(sql)) {
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                jComboBox1.addItem(rs.getString("skillName"));
            }
        }
//        JDBCManager manager = ConnectionManager.getConnection();
//        al = manager.getQueryData(sql);
//        for (int i = 0; i < al.size(); i++) {
//            jComboBox1.addItem(al.get(i).get("skillName"));
//        }
        jComboBox1.addActionListener(e -> {
            selectedSkill = jComboBox1.getSelectedItem().toString();
            System.out.println(selectedSkill);
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPhaseName = new javax.swing.JLabel();
        txtPhaseName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        lblSelectUser = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        lblPhaseName.setText("Phase Name");

        txtPhaseName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhaseNameActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Skill");

        jLabel2.setText("Add user");

        lblSelectUser.setText("Click to select...");
        lblSelectUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSelectUserMouseClicked(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPhaseName)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPhaseName)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSelectUser, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jButton1)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhaseName)
                    .addComponent(txtPhaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblSelectUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(32, 32, 32))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtPhaseNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhaseNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhaseNameActionPerformed

    private void lblSelectUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSelectUserMouseClicked
        // TODO add your handling code here:
        AssignUserInPhase userInPhase = new AssignUserInPhase();
        userInPhase.setVisible(true);
    }//GEN-LAST:event_lblSelectUserMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (!txtPhaseName.getText().isEmpty()) {
            if (!jComboBox1.getSelectedItem().toString().isEmpty()) {
                try{
                if(AssignUserInPhase.getSelectedUserEmails().get(0)=="" || AssignUserInPhase.getSelectedUserEmails().get(0)==null){
                try {
                    phaseId = System.currentTimeMillis();

                    sql = "select phaseName from phase where phaseName = ?";
                    boolean b = false;
                    try (PreparedStatement stmt = con.prepareStatement(sql)) {
                        stmt.setString(1, txtPhaseName.getText());
                        ResultSet rs = stmt.executeQuery();
                        if (rs.next()) {
                            Main.showMessageDialog(Alert.AlertType.ERROR, "Error", null, "This phase already exists in this project.");
                            b = false;
                        } else {
                            b = true;
                        }
                    }
                    if (b == true) {
                        sql = "insert into phase(phaseId, phaseName, projectId)\n"
                                + " values(?,?,?);";

                        try (PreparedStatement stmt = con.prepareStatement(sql)) {
                            stmt.setString(1, Long.toString(phaseId));
                            stmt.setString(2, txtPhaseName.getText());
                            stmt.setString(3, Long.toString(projectId));
                            stmt.executeUpdate();
                        }

                        sql = "insert into skillsForPhase(phaseId, skillId)\n"
                                + "select '" + phaseId + "', skillId from skill where skillName = ?;";

                        try (PreparedStatement stmt = con.prepareStatement(sql)) {
                            stmt.setString(1, getSelectedSkill());
                            stmt.executeUpdate();
                        }

                        sql = "insert into userInPhases(phaseId, userEmail)\n"
                                + "values (?,?);";

                        for (i = 0; i < AssignUserInPhase.getSelectedUserEmails().size(); i++) {
                            try (PreparedStatement stmt = con.prepareStatement(sql)) {
                                stmt.setString(1, Double.toString(phaseId));
                                stmt.setString(2, AssignUserInPhase.getSelectedUserEmails().get(i).toString());
                                stmt.executeUpdate();
                            }
                        }

                        Main.showMessageDialog(Alert.AlertType.CONFIRMATION, "Success", null, "Phase added successfully.");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(CreatePhaseSwing.class.getName()).log(Level.SEVERE, null, ex);
                }
                }else{
                    Main.showMessageDialog(Alert.AlertType.WARNING, "Warning", null, "Please add a user in phase.");
                }
                }catch(IndexOutOfBoundsException ie){
                    Main.showMessageDialog(Alert.AlertType.WARNING, "Warning", null, "Please add a user in phase.");
                }
            } else {
                Main.showMessageDialog(Alert.AlertType.WARNING, "Warning", null, "Please select skill");
            }
            
        } else {
            Main.showMessageDialog(Alert.AlertType.WARNING, "Warning", null, "Please enter a phase name.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public static String getSelectedSkill() {
        return selectedSkill;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblPhaseName;
    private javax.swing.JLabel lblSelectUser;
    private static javax.swing.JTextField txtPhaseName;
    // End of variables declaration//GEN-END:variables
}
